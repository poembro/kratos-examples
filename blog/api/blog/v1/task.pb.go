// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: api/blog/v1/task.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDayTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDayTaskRequest) Reset() {
	*x = ListDayTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDayTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDayTaskRequest) ProtoMessage() {}

func (x *ListDayTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDayTaskRequest.ProtoReflect.Descriptor instead.
func (*ListDayTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{0}
}

type ListDayTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveVal               int32            `protobuf:"varint,1,opt,name=active_val,json=activeVal,proto3" json:"active_val,omitempty"`                                                // 用户当前活跃值
	DayTaskActiveList       []*DayTask       `protobuf:"bytes,2,rep,name=day_task_active_list,json=dayTaskActiveList,proto3" json:"day_task_active_list,omitempty"`                     // 活跃值任务类型列表
	DayTaskActiveTotalState []*DayTaskRecord `protobuf:"bytes,3,rep,name=day_task_active_total_state,json=dayTaskActiveTotalState,proto3" json:"day_task_active_total_state,omitempty"` // 活跃值任务类型完成情况
	DayTaskList             []*DayTask       `protobuf:"bytes,4,rep,name=day_task_list,json=dayTaskList,proto3" json:"day_task_list,omitempty"`                                         // 普通每日任务类型列表
	DayTaskTotalState       []*DayTaskRecord `protobuf:"bytes,5,rep,name=day_task_total_state,json=dayTaskTotalState,proto3" json:"day_task_total_state,omitempty"`                     // 普通每日任务类型完成情况
}

func (x *ListDayTaskReply) Reset() {
	*x = ListDayTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDayTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDayTaskReply) ProtoMessage() {}

func (x *ListDayTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDayTaskReply.ProtoReflect.Descriptor instead.
func (*ListDayTaskReply) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{1}
}

func (x *ListDayTaskReply) GetActiveVal() int32 {
	if x != nil {
		return x.ActiveVal
	}
	return 0
}

func (x *ListDayTaskReply) GetDayTaskActiveList() []*DayTask {
	if x != nil {
		return x.DayTaskActiveList
	}
	return nil
}

func (x *ListDayTaskReply) GetDayTaskActiveTotalState() []*DayTaskRecord {
	if x != nil {
		return x.DayTaskActiveTotalState
	}
	return nil
}

func (x *ListDayTaskReply) GetDayTaskList() []*DayTask {
	if x != nil {
		return x.DayTaskList
	}
	return nil
}

func (x *ListDayTaskReply) GetDayTaskTotalState() []*DayTaskRecord {
	if x != nil {
		return x.DayTaskTotalState
	}
	return nil
}

type PushDayTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PushDayTaskRequest) Reset() {
	*x = PushDayTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushDayTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushDayTaskRequest) ProtoMessage() {}

func (x *PushDayTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushDayTaskRequest.ProtoReflect.Descriptor instead.
func (*PushDayTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{2}
}

func (x *PushDayTaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RecvDayTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RecvDayTaskRequest) Reset() {
	*x = RecvDayTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvDayTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvDayTaskRequest) ProtoMessage() {}

func (x *RecvDayTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvDayTaskRequest.ProtoReflect.Descriptor instead.
func (*RecvDayTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{3}
}

func (x *RecvDayTaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 每日任务
type DayTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActiveId     string    `protobuf:"bytes,2,opt,name=active_id,json=activeId,proto3" json:"active_id,omitempty"`
	MemberId     int64     `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	TaskId       int64     `protobuf:"varint,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Adddate      string    `protobuf:"bytes,5,opt,name=adddate,proto3" json:"adddate,omitempty"`
	TaskName     string    `protobuf:"bytes,6,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	ConditionNum int32     `protobuf:"varint,7,opt,name=condition_num,json=conditionNum,proto3" json:"condition_num,omitempty"`
	Type         int32     `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"` // 1 表示 活跃度每日任务  2 表示普通每日任务
	Rewards      []*Reward `protobuf:"bytes,9,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *DayTask) Reset() {
	*x = DayTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTask) ProtoMessage() {}

func (x *DayTask) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTask.ProtoReflect.Descriptor instead.
func (*DayTask) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{4}
}

func (x *DayTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DayTask) GetActiveId() string {
	if x != nil {
		return x.ActiveId
	}
	return ""
}

func (x *DayTask) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *DayTask) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *DayTask) GetAdddate() string {
	if x != nil {
		return x.Adddate
	}
	return ""
}

func (x *DayTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *DayTask) GetConditionNum() int32 {
	if x != nil {
		return x.ConditionNum
	}
	return 0
}

func (x *DayTask) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DayTask) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

// 完成每日任务记录
type DayTaskRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayTaskId int64 `protobuf:"varint,1,opt,name=day_task_id,json=dayTaskId,proto3" json:"day_task_id,omitempty"` // 每日任务id 对应DayTask结构的id
	Condition int32 `protobuf:"varint,2,opt,name=condition,proto3" json:"condition,omitempty"`                    // 当前完成了多少次
}

func (x *DayTaskRecord) Reset() {
	*x = DayTaskRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTaskRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTaskRecord) ProtoMessage() {}

func (x *DayTaskRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTaskRecord.ProtoReflect.Descriptor instead.
func (*DayTaskRecord) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{5}
}

func (x *DayTaskRecord) GetDayTaskId() int64 {
	if x != nil {
		return x.DayTaskId
	}
	return 0
}

func (x *DayTaskRecord) GetCondition() int32 {
	if x != nil {
		return x.Condition
	}
	return 0
}

// 奖励
type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 奖励物品id
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"` // 奖励图片
	Num  int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`  // 奖励数量
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{6}
}

func (x *Reward) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reward) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Reward) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// 主线任务
type MasterTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActiveId     string `protobuf:"bytes,2,opt,name=active_id,json=activeId,proto3" json:"active_id,omitempty"`
	TaskId       int64  `protobuf:"varint,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName     string `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	ConditionNum int32  `protobuf:"varint,5,opt,name=condition_num,json=conditionNum,proto3" json:"condition_num,omitempty"` // 需要完成多少次
	Type         int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                                     // 任务类型
	Config       string `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`                                  // 是1个json 字符串 前端按照type值 解析 出不同的结构
}

func (x *MasterTask) Reset() {
	*x = MasterTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterTask) ProtoMessage() {}

func (x *MasterTask) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterTask.ProtoReflect.Descriptor instead.
func (*MasterTask) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{7}
}

func (x *MasterTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MasterTask) GetActiveId() string {
	if x != nil {
		return x.ActiveId
	}
	return ""
}

func (x *MasterTask) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *MasterTask) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *MasterTask) GetConditionNum() int32 {
	if x != nil {
		return x.ConditionNum
	}
	return 0
}

func (x *MasterTask) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MasterTask) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type MasterTaskRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterTaskId int64 `protobuf:"varint,1,opt,name=master_task_id,json=masterTaskId,proto3" json:"master_task_id,omitempty"` // 每日任务id 对应MasterTask结构的id
	Condition    int32 `protobuf:"varint,2,opt,name=condition,proto3" json:"condition,omitempty"`                             // 当前完成了多少次
}

func (x *MasterTaskRecord) Reset() {
	*x = MasterTaskRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterTaskRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterTaskRecord) ProtoMessage() {}

func (x *MasterTaskRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterTaskRecord.ProtoReflect.Descriptor instead.
func (*MasterTaskRecord) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{8}
}

func (x *MasterTaskRecord) GetMasterTaskId() int64 {
	if x != nil {
		return x.MasterTaskId
	}
	return 0
}

func (x *MasterTaskRecord) GetCondition() int32 {
	if x != nil {
		return x.Condition
	}
	return 0
}

type ListMasterTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMasterTaskRequest) Reset() {
	*x = ListMasterTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMasterTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterTaskRequest) ProtoMessage() {}

func (x *ListMasterTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterTaskRequest.ProtoReflect.Descriptor instead.
func (*ListMasterTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{9}
}

type ListMasterTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterTaskTotalState []*MasterTask       `protobuf:"bytes,1,rep,name=master_task_total_state,json=masterTaskTotalState,proto3" json:"master_task_total_state,omitempty"` // 主线任务 任务类型 完成情况
	MasterTaskList       []*MasterTaskRecord `protobuf:"bytes,2,rep,name=master_task_list,json=masterTaskList,proto3" json:"master_task_list,omitempty"`                     // 主线任务 任务类型列表
}

func (x *ListMasterTaskReply) Reset() {
	*x = ListMasterTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMasterTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterTaskReply) ProtoMessage() {}

func (x *ListMasterTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterTaskReply.ProtoReflect.Descriptor instead.
func (*ListMasterTaskReply) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{10}
}

func (x *ListMasterTaskReply) GetMasterTaskTotalState() []*MasterTask {
	if x != nil {
		return x.MasterTaskTotalState
	}
	return nil
}

func (x *ListMasterTaskReply) GetMasterTaskList() []*MasterTaskRecord {
	if x != nil {
		return x.MasterTaskList
	}
	return nil
}

type PushMasterTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PushMasterTaskRequest) Reset() {
	*x = PushMasterTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_blog_v1_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMasterTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMasterTaskRequest) ProtoMessage() {}

func (x *PushMasterTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_blog_v1_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMasterTaskRequest.ProtoReflect.Descriptor instead.
func (*PushMasterTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_blog_v1_task_proto_rawDescGZIP(), []int{11}
}

func (x *PushMasterTaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_api_blog_v1_task_proto protoreflect.FileDescriptor

var file_api_blog_v1_task_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xc9, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x11, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x1b, 0x64, 0x61, 0x79, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x17, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x0d, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x64, 0x61, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a,
	0x12, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x76, 0x44, 0x61, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x07, 0x44, 0x61,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x56, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a,
	0x0a, 0x17, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x27, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x32, 0xf5, 0x06, 0x0a, 0x0f, 0x54, 0x61, 0x73,
	0x6b, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x63, 0x92, 0x41, 0x47, 0x0a, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97,
	0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x12, 0x12, 0xe6,
	0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0x1a, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x62, 0x09, 0x0a, 0x07, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x64, 0x61, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x50, 0x75,
	0x73, 0x68, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x66, 0x92, 0x41, 0x47, 0x0a, 0x12, 0xe6,
	0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d,
	0x97, 0x12, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4,
	0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0x1a, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0x62, 0x09, 0x0a, 0x07, 0x0a, 0x03, 0x6a,
	0x77, 0x74, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x64, 0x61, 0x79, 0x2f, 0x70, 0x75, 0x73, 0x68,
	0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x76, 0x44, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x44,
	0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x66, 0x92, 0x41, 0x47, 0x0a, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x12, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe9, 0xa2, 0x86, 0xe5, 0x8f, 0x96, 0x1a, 0x12, 0xe6, 0xaf,
	0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe9, 0xa2, 0x86, 0xe5, 0x8f, 0x96,
	0x62, 0x09, 0x0a, 0x07, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x64,
	0x61, 0x79, 0x2f, 0x72, 0x65, 0x63, 0x76, 0x12, 0xb6, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x66, 0x92, 0x41, 0x47, 0x0a, 0x12, 0xe4,
	0xb8, 0xbb, 0xe7, 0xba, 0xbf, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d,
	0x97, 0x12, 0x12, 0xe4, 0xb8, 0xbb, 0xe7, 0xba, 0xbf, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x12, 0xe4, 0xb8, 0xbb, 0xe7, 0xba, 0xbf, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x62, 0x09, 0x0a, 0x07, 0x0a, 0x03, 0x6a,
	0x77, 0x74, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0xad, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x69, 0x92, 0x41, 0x47, 0x0a, 0x12, 0xe4, 0xb8, 0xbb, 0xe7,
	0xba, 0xbf, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x12, 0x12,
	0xe4, 0xb8, 0xbb, 0xe7, 0xba, 0xbf, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8a, 0xe6,
	0x8a, 0xa5, 0x1a, 0x12, 0xe4, 0xb8, 0xbb, 0xe7, 0xba, 0xbf, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0x62, 0x09, 0x0a, 0x07, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x12,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x73, 0x68,
	0x42, 0x81, 0x02, 0x92, 0x41, 0xcf, 0x01, 0x12, 0x9f, 0x01, 0x0a, 0x19, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x2d, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe6,
	0x96, 0x87, 0xe6, 0xa1, 0xa3, 0x12, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0xe6, 0x96, 0x87, 0xe6, 0xa1, 0xa3, 0x22, 0x69, 0x0a, 0x1a, 0xe6, 0x98, 0x93,
	0xe8, 0xb5, 0xb7, 0xe6, 0xb8, 0xb8, 0x73, 0x61, 0x61, 0x73, 0x20, 0xe6, 0x98, 0x93, 0xe9, 0x95,
	0x9c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x12, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x74, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x79, 0x65, 0x63, 0x65, 0x6c, 0x75, 0x65, 0x2f, 0x79,
	0x69, 0x71, 0x69, 0x79, 0x6f, 0x6f, 0x1a, 0x1c, 0x6c, 0x75, 0x6f, 0x79, 0x75, 0x78, 0x69, 0x61,
	0x6e, 0x67, 0x32, 0x31, 0x39, 0x33, 0x40, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x74, 0x69, 0x61, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x5a, 0x2b, 0x0a, 0x29, 0x0a, 0x03, 0x6a,
	0x77, 0x74, 0x12, 0x22, 0x08, 0x02, 0x12, 0x0b, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x02, 0x28, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_blog_v1_task_proto_rawDescOnce sync.Once
	file_api_blog_v1_task_proto_rawDescData = file_api_blog_v1_task_proto_rawDesc
)

func file_api_blog_v1_task_proto_rawDescGZIP() []byte {
	file_api_blog_v1_task_proto_rawDescOnce.Do(func() {
		file_api_blog_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_blog_v1_task_proto_rawDescData)
	})
	return file_api_blog_v1_task_proto_rawDescData
}

var file_api_blog_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_blog_v1_task_proto_goTypes = []interface{}{
	(*ListDayTaskRequest)(nil),    // 0: blog.v1.ListDayTaskRequest
	(*ListDayTaskReply)(nil),      // 1: blog.v1.ListDayTaskReply
	(*PushDayTaskRequest)(nil),    // 2: blog.v1.PushDayTaskRequest
	(*RecvDayTaskRequest)(nil),    // 3: blog.v1.RecvDayTaskRequest
	(*DayTask)(nil),               // 4: blog.v1.DayTask
	(*DayTaskRecord)(nil),         // 5: blog.v1.DayTaskRecord
	(*Reward)(nil),                // 6: blog.v1.Reward
	(*MasterTask)(nil),            // 7: blog.v1.MasterTask
	(*MasterTaskRecord)(nil),      // 8: blog.v1.MasterTaskRecord
	(*ListMasterTaskRequest)(nil), // 9: blog.v1.ListMasterTaskRequest
	(*ListMasterTaskReply)(nil),   // 10: blog.v1.ListMasterTaskReply
	(*PushMasterTaskRequest)(nil), // 11: blog.v1.PushMasterTaskRequest
	(*Empty)(nil),                 // 12: common.v1.Empty
}
var file_api_blog_v1_task_proto_depIdxs = []int32{
	4,  // 0: blog.v1.ListDayTaskReply.day_task_active_list:type_name -> blog.v1.DayTask
	5,  // 1: blog.v1.ListDayTaskReply.day_task_active_total_state:type_name -> blog.v1.DayTaskRecord
	4,  // 2: blog.v1.ListDayTaskReply.day_task_list:type_name -> blog.v1.DayTask
	5,  // 3: blog.v1.ListDayTaskReply.day_task_total_state:type_name -> blog.v1.DayTaskRecord
	6,  // 4: blog.v1.DayTask.rewards:type_name -> blog.v1.Reward
	7,  // 5: blog.v1.ListMasterTaskReply.master_task_total_state:type_name -> blog.v1.MasterTask
	8,  // 6: blog.v1.ListMasterTaskReply.master_task_list:type_name -> blog.v1.MasterTaskRecord
	0,  // 7: blog.v1.TaskGrpcService.ListDayTask:input_type -> blog.v1.ListDayTaskRequest
	2,  // 8: blog.v1.TaskGrpcService.PushDayTask:input_type -> blog.v1.PushDayTaskRequest
	3,  // 9: blog.v1.TaskGrpcService.RecvDayTask:input_type -> blog.v1.RecvDayTaskRequest
	9,  // 10: blog.v1.TaskGrpcService.ListMasterTask:input_type -> blog.v1.ListMasterTaskRequest
	11, // 11: blog.v1.TaskGrpcService.PushMasterTask:input_type -> blog.v1.PushMasterTaskRequest
	1,  // 12: blog.v1.TaskGrpcService.ListDayTask:output_type -> blog.v1.ListDayTaskReply
	12, // 13: blog.v1.TaskGrpcService.PushDayTask:output_type -> common.v1.Empty
	12, // 14: blog.v1.TaskGrpcService.RecvDayTask:output_type -> common.v1.Empty
	10, // 15: blog.v1.TaskGrpcService.ListMasterTask:output_type -> blog.v1.ListMasterTaskReply
	12, // 16: blog.v1.TaskGrpcService.PushMasterTask:output_type -> common.v1.Empty
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_api_blog_v1_task_proto_init() }
func file_api_blog_v1_task_proto_init() {
	if File_api_blog_v1_task_proto != nil {
		return
	}
	file_api_common_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_blog_v1_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDayTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDayTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushDayTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvDayTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayTaskRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterTaskRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMasterTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMasterTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_blog_v1_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMasterTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_blog_v1_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_blog_v1_task_proto_goTypes,
		DependencyIndexes: file_api_blog_v1_task_proto_depIdxs,
		MessageInfos:      file_api_blog_v1_task_proto_msgTypes,
	}.Build()
	File_api_blog_v1_task_proto = out.File
	file_api_blog_v1_task_proto_rawDesc = nil
	file_api_blog_v1_task_proto_goTypes = nil
	file_api_blog_v1_task_proto_depIdxs = nil
}
