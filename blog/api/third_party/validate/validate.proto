syntax = "proto2";
package validate;

option go_package = "github.com/envoyproxy/protoc-gen-validate/validate";
option java_package = "io.envoyproxy.pgv.validate";

import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// Validation rules applied at the message level
extend google.protobuf.MessageOptions {
  // Disabled nullifies any validation rules for this message, including any
  // message fields associated with it that do support validation.
  optional bool disabled = 1071;
  // Ignore skips generation of validation methods for this message.
  optional bool ignored = 1072;
}

// Validation rules applied at the oneof level
extend google.protobuf.OneofOptions {
  // Required ensures that exactly one the field options in a oneof is set;
  // validation fails if no fields in the oneof are set.
  optional bool required = 1071;
}

// Validation rules applied at the field level
extend google.protobuf.FieldOptions {
  // Rules specify the validations to be performed on this field. By default,
  // no validation is performed against a field.
  optional FieldRules rules = 1071;
}

// FieldRules encapsulates the rules for each type of field. Depending on the
// field, the correct set should be used to ensure proper validations.
message FieldRules {
  optional MessageRules message = 17;
  oneof type {
    // Scalar Field Types
    FloatRules    float    = 1;
    DoubleRules   double   = 2;
    Int32Rules    int32    = 3;
    Int64Rules    int64    = 4;
    UInt32Rules   uint32   = 5;
    UInt64Rules   uint64   = 6;
    SInt32Rules   sint32   = 7;
    SInt64Rules   sint64   = 8;
    Fixed32Rules  fixed32  = 9;
    Fixed64Rules  fixed64  = 10;
    SFixed32Rules sfixed32 = 11;
    SFixed64Rules sfixed64 = 12;
    BoolRules     bool     = 13;
    StringRules   string   = 14;
    BytesRules    bytes    = 15;

    // Complex Field Types
    EnumRules     enum     = 16;
    RepeatedRules repeated = 18;
    MapRules      map      = 19;

    // Well-Known Field Types
    AnyRules       any       = 20;
    DurationRules  duration  = 21;
    TimestampRules timestamp = 22;
  }
}

message FloatField {
  optional float value = 1;
  optional string msg = 2;
}

message FloatsField {
  repeated float values = 1;
  optional string msg = 2;
}

message BoolField {
  optional bool value = 1;
  optional string msg = 2;
}

// FloatRules describes the constraints applied to `float` values
message FloatRules {
  // Const specifies that this field must be exactly the specified value
  optional FloatField const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional FloatField lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional FloatField lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional FloatField gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional FloatField gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional FloatsField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional FloatsField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message DoubleField {
  optional double value = 1;
  optional string msg = 2;
}

message DoublesField {
  repeated double values = 1;
  optional string msg = 2;
}

// DoubleRules describes the constraints applied to `double` values
message DoubleRules {
  // Const specifies that this field must be exactly the specified value
  optional DoubleField const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional DoubleField lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional DoubleField lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional DoubleField gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional DoubleField gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional DoublesField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional DoublesField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message Int32Field {
  optional int32 value = 1;
  optional string msg = 2;
}

message Int32sField {
  repeated int32 values = 1;
  optional string msg = 2;
}

// Int32Rules describes the constraints applied to `int32` values
message Int32Rules {
  // Const specifies that this field must be exactly the specified value
  optional Int32Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional Int32Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional Int32Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional Int32Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional Int32Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional Int32sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional Int32sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message Int64Field {
  optional int64 value = 1;
  optional string msg = 2;
}

message Int64sField {
  repeated int64 values = 1;
  optional string msg = 2;
}

// Int64Rules describes the constraints applied to `int64` values
message Int64Rules {
  // Const specifies that this field must be exactly the specified value
  optional Int64Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional Int64Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional Int64Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional Int64Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional Int64Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional Int64sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional Int64sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message UInt32Field {
  optional uint32 value = 1;
  optional string msg = 2;
}

message UInt32sField {
  repeated uint32 values = 1;
  optional string msg = 2;
}

// UInt32Rules describes the constraints applied to `uint32` values
message UInt32Rules {
  // Const specifies that this field must be exactly the specified value
  optional UInt32Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional UInt32Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional UInt32Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional UInt32Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional UInt32Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional UInt32sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional UInt32sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message UInt64Field {
  optional uint64 value = 1;
  optional string msg = 2;
}

message UInt64sField {
  repeated uint64 values = 1;
  optional string msg = 2;
}

// UInt64Rules describes the constraints applied to `uint64` values
message UInt64Rules {
  // Const specifies that this field must be exactly the specified value
  optional UInt64Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional UInt64Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional UInt64Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional UInt64Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional UInt64Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional UInt64sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional UInt64sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message SInt32Field {
  optional sint32 value = 1;
  optional string msg = 2;
}

message SInt32sField {
  repeated sint32 values = 1;
  optional string msg = 2;
}

// SInt32Rules describes the constraints applied to `sint32` values
message SInt32Rules {
  // Const specifies that this field must be exactly the specified value
  optional SInt32Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional SInt32Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional SInt32Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional SInt32Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional SInt32Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional SInt32sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional SInt32sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message SInt64Field {
  optional sint64 value = 1;
  optional string msg = 2;
}

message SInt64sField {
  repeated sint64 values = 1;
  optional string msg = 2;
}

// SInt64Rules describes the constraints applied to `sint64` values
message SInt64Rules {
  // Const specifies that this field must be exactly the specified value
  optional SInt64Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional SInt64Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional SInt64Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional SInt64Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional SInt64Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional SInt64sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional SInt64sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message Fixed32Field {
  optional fixed32 value = 1;
  optional string msg = 2;
}

message Fixed32sField {
  repeated fixed32 values = 1;
  optional string msg = 2;
}

// Fixed32Rules describes the constraints applied to `fixed32` values
message Fixed32Rules {
  // Const specifies that this field must be exactly the specified value
  optional Fixed32Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional Fixed32Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional Fixed32Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional Fixed32Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional Fixed32Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional Fixed32sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional Fixed32sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message Fixed64Field {
  optional fixed64 value = 1;
  optional string msg = 2;
}

message Fixed64sField {
  repeated fixed64 values = 1;
  optional string msg = 2;
}

// Fixed64Rules describes the constraints applied to `fixed64` values
message Fixed64Rules {
  // Const specifies that this field must be exactly the specified value
  optional Fixed64Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional Fixed64Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional Fixed64Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional Fixed64Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional Fixed64Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional Fixed64sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional Fixed64sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message SFixed32Field {
  optional sfixed32 value = 1;
  optional string msg = 2;
}

message SFixed32sField {
  repeated sfixed32 values = 1;
  optional string msg = 2;
}

// SFixed32Rules describes the constraints applied to `sfixed32` values
message SFixed32Rules {
  // Const specifies that this field must be exactly the specified value
  optional SFixed32Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional SFixed32Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional SFixed32Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional SFixed32Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional SFixed32Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional SFixed32sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional SFixed32sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

message SFixed64Field {
  optional sfixed64 value = 1;
  optional string msg = 2;
}

message SFixed64sField {
  repeated sfixed64 values = 1;
  optional string msg = 2;
}

// SFixed64Rules describes the constraints applied to `sfixed64` values
message SFixed64Rules {
  // Const specifies that this field must be exactly the specified value
  optional SFixed64Field const = 1;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional SFixed64Field lt = 2;

  // Lte specifies that this field must be less than or equal to the
  // specified value, inclusive
  optional SFixed64Field lte = 3;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  // range is reversed.
  optional SFixed64Field gt = 4;

  // Gte specifies that this field must be greater than or equal to the
  // specified value, inclusive. If the value of Gte is larger than a
  // specified Lt or Lte, the range is reversed.
  optional SFixed64Field gte = 5;

  // In specifies that this field must be equal to one of the specified
  // values
  optional SFixed64sField in = 6;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional SFixed64sField not_in = 7;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 8;
}

// BoolRules describes the constraints applied to `bool` values
message BoolRules {
  // Const specifies that this field must be exactly the specified value
  optional BoolField const = 1;
}

message StringFiled {
  optional string value = 1;
  optional string msg = 2;
}

message StringsFiled {
  repeated string values = 1;
  optional string msg = 2;
}

// StringRules describe the constraints applied to `string` values
message StringRules {
  // Const specifies that this field must be exactly the specified value
  optional StringFiled const = 1;

  // Len specifies that this field must be the specified number of
  // characters (Unicode code points). Note that the number of
  // characters may differ from the number of bytes in the string.
  optional UInt64Field len = 19;

  // MinLen specifies that this field must be the specified number of
  // characters (Unicode code points) at a minimum. Note that the number of
  // characters may differ from the number of bytes in the string.
  optional UInt64Field min_len = 2;

  // MaxLen specifies that this field must be the specified number of
  // characters (Unicode code points) at a maximum. Note that the number of
  // characters may differ from the number of bytes in the string.
  optional UInt64Field max_len = 3;

  // LenBytes specifies that this field must be the specified number of bytes
  optional UInt64Field len_bytes = 20;

  // MinBytes specifies that this field must be the specified number of bytes
  // at a minimum
  optional UInt64Field min_bytes = 4;

  // MaxBytes specifies that this field must be the specified number of bytes
  // at a maximum
  optional UInt64Field max_bytes = 5;

  // Pattern specifes that this field must match against the specified
  // regular expression (RE2 syntax). The included expression should elide
  // any delimiters.
  optional StringFiled pattern  = 6;

  // Prefix specifies that this field must have the specified substring at
  // the beginning of the string.
  optional StringFiled prefix   = 7;

  // Suffix specifies that this field must have the specified substring at
  // the end of the string.
  optional StringFiled suffix   = 8;

  // Contains specifies that this field must have the specified substring
  // anywhere in the string.
  optional StringFiled contains = 9;

  // NotContains specifies that this field cannot have the specified substring
  // anywhere in the string.
  optional StringFiled not_contains = 23;

  // In specifies that this field must be equal to one of the specified
  // values
  optional StringsFiled in     = 10;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional StringsFiled not_in = 11;

  // WellKnown rules provide advanced constraints against common string
  // patterns
  oneof well_known {
    // Email specifies that the field must be a valid email address as
    // defined by RFC 5322
    BoolField email    = 12;

    // Hostname specifies that the field must be a valid hostname as
    // defined by RFC 1034. This constraint does not support
    // internationalized domain names (IDNs).
    BoolField hostname = 13;

    // Ip specifies that the field must be a valid IP (v4 or v6) address.
    // Valid IPv6 addresses should not include surrounding square brackets.
    BoolField ip       = 14;

    // Ipv4 specifies that the field must be a valid IPv4 address.
    BoolField ipv4     = 15;

    // Ipv6 specifies that the field must be a valid IPv6 address. Valid
    // IPv6 addresses should not include surrounding square brackets.
    BoolField ipv6     = 16;

    // Uri specifies that the field must be a valid, absolute URI as defined
    // by RFC 3986
    BoolField uri      = 17;

    // UriRef specifies that the field must be a valid URI as defined by RFC
    // 3986 and may be relative or absolute.
    BoolField uri_ref  = 18;

    // Address specifies that the field must be either a valid hostname as
    // defined by RFC 1034 (which does not support internationalized domain
    // names or IDNs), or it can be a valid IP (v4 or v6).
    BoolField address  = 21;

    // Uuid specifies that the field must be a valid UUID as defined by
    // RFC 4122
    BoolField uuid     = 22;

    // WellKnownRegex specifies a common well known pattern defined as a regex.
    KnownRegex well_known_regex = 24;
  }

  // This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
  // strict header validation.
  // By default, this is true, and HTTP header validations are RFC-compliant.
  // Setting to false will enable a looser validations that only disallows
  // \r\n\0 characters, which can be used to bypass header matching rules.
  optional bool strict = 25 [default = true];

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 26;
}

// WellKnownRegex contain some well-known patterns.
enum KnownRegex {
  UNKNOWN = 0;

  // HTTP header name as defined by RFC 7230.
  HTTP_HEADER_NAME = 1;

  // HTTP header value as defined by RFC 7230.
  HTTP_HEADER_VALUE = 2;
}

message ByteField {
  optional bytes value = 1;
  optional string msg = 2;
}

message BytesField {
  repeated bytes values = 1;
  optional string msg = 2;
}

// BytesRules describe the constraints applied to `bytes` values
message BytesRules {
  // Const specifies that this field must be exactly the specified value
  optional ByteField const = 1;

  // Len specifies that this field must be the specified number of bytes
  optional UInt64Field len = 13;

  // MinLen specifies that this field must be the specified number of bytes
  // at a minimum
  optional UInt64Field min_len = 2;

  // MaxLen specifies that this field must be the specified number of bytes
  // at a maximum
  optional UInt64Field max_len = 3;

  // Pattern specifes that this field must match against the specified
  // regular expression (RE2 syntax). The included expression should elide
  // any delimiters.
  optional StringFiled pattern  = 4;

  // Prefix specifies that this field must have the specified bytes at the
  // beginning of the string.
  optional ByteField  prefix   = 5;

  // Suffix specifies that this field must have the specified bytes at the
  // end of the string.
  optional ByteField  suffix   = 6;

  // Contains specifies that this field must have the specified bytes
  // anywhere in the string.
  optional ByteField  contains = 7;

  // In specifies that this field must be equal to one of the specified
  // values
  optional BytesField in     = 8;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional BytesField not_in = 9;

  // WellKnown rules provide advanced constraints against common byte
  // patterns
  oneof well_known {
    // Ip specifies that the field must be a valid IP (v4 or v6) address in
    // byte format
    BoolField ip   = 10;

    // Ipv4 specifies that the field must be a valid IPv4 address in byte
    // format
    BoolField ipv4 = 11;

    // Ipv6 specifies that the field must be a valid IPv6 address in byte
    // format
    BoolField ipv6 = 12;
  }

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 14;
}

// EnumRules describe the constraints applied to enum values
message EnumRules {
  // Const specifies that this field must be exactly the specified value
  optional Int32Field const        = 1;

  // DefinedOnly specifies that this field must be only one of the defined
  // values for this enum, failing on any undefined value.
  optional BoolField  defined_only = 2;

  // In specifies that this field must be equal to one of the specified
  // values
  optional Int32sField in           = 3;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional Int32sField not_in       = 4;
}

// MessageRules describe the constraints applied to embedded message values.
// For message-type fields, validation is performed recursively.
message MessageRules {
  // Skip specifies that the validation rules of this field should not be
  // evaluated
  optional BoolField skip     = 1;

  // Required specifies that this field must be set
  optional BoolField required = 2;
}

// RepeatedRules describe the constraints applied to `repeated` values
message RepeatedRules {
  // MinItems specifies that this field must have the specified number of
  // items at a minimum
  optional UInt64Field min_items = 1;

  // MaxItems specifies that this field must have the specified number of
  // items at a maximum
  optional UInt64Field max_items = 2;

  // Unique specifies that all elements in this field must be unique. This
  // contraint is only applicable to scalar and enum types (messages are not
  // supported).
  optional BoolField   unique    = 3;

  // Items specifies the contraints to be applied to each item in the field.
  // Repeated message fields will still execute validation against each item
  // unless skip is specified here.
  optional FieldRules items = 4;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 5;
}

// MapRules describe the constraints applied to `map` values
message MapRules {
  // MinPairs specifies that this field must have the specified number of
  // KVs at a minimum
  optional UInt64Field min_pairs = 1;

  // MaxPairs specifies that this field must have the specified number of
  // KVs at a maximum
  optional UInt64Field max_pairs = 2;

  // NoSparse specifies values in this field cannot be unset. This only
  // applies to map's with message value types.
  optional BoolField no_sparse = 3;

  // Keys specifies the constraints to be applied to each key in the field.
  optional FieldRules keys   = 4;

  // Values specifies the constraints to be applied to the value of each key
  // in the field. Message values will still have their validations evaluated
  // unless skip is specified here.
  optional FieldRules values = 5;

  // IgnoreEmpty specifies that the validation rules of this field should be
  // evaluated only if the field is not empty
  optional bool ignore_empty = 6;
}

// AnyRules describe constraints applied exclusively to the
// `google.protobuf.Any` well-known type
message AnyRules {
  // Required specifies that this field must be set
  optional BoolField required = 1;

  // In specifies that this field's `type_url` must be equal to one of the
  // specified values.
  optional StringsFiled in     = 2;

  // NotIn specifies that this field's `type_url` must not be equal to any of
  // the specified values.
  optional StringsFiled not_in = 3;
}

message DurationField {
  optional google.protobuf.Duration value = 1;
  optional string msg = 2;
}

message DurationsField {
  repeated google.protobuf.Duration values = 1;
  optional string msg = 2;
}

// DurationRules describe the constraints applied exclusively to the
// `google.protobuf.Duration` well-known type
message DurationRules {
  // Required specifies that this field must be set
  optional BoolField required = 1;

  // Const specifies that this field must be exactly the specified value
  optional DurationField const = 2;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional DurationField lt = 3;

  // Lt specifies that this field must be less than the specified value,
  // inclusive
  optional DurationField lte = 4;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive
  optional DurationField gt = 5;

  // Gte specifies that this field must be greater than the specified value,
  // inclusive
  optional DurationField gte = 6;

  // In specifies that this field must be equal to one of the specified
  // values
  optional DurationsField in = 7;

  // NotIn specifies that this field cannot be equal to one of the specified
  // values
  optional DurationsField not_in = 8;
}

message TimestampField {
  optional google.protobuf.Timestamp value = 1;
  optional string msg = 2;
}

// TimestampRules describe the constraints applied exclusively to the
// `google.protobuf.Timestamp` well-known type
message TimestampRules {
  // Required specifies that this field must be set
  optional BoolField required = 1;

  // Const specifies that this field must be exactly the specified value
  optional TimestampField const = 2;

  // Lt specifies that this field must be less than the specified value,
  // exclusive
  optional TimestampField lt = 3;

  // Lte specifies that this field must be less than the specified value,
  // inclusive
  optional TimestampField lte = 4;

  // Gt specifies that this field must be greater than the specified value,
  // exclusive
  optional TimestampField gt = 5;

  // Gte specifies that this field must be greater than the specified value,
  // inclusive
  optional TimestampField gte = 6;

  // LtNow specifies that this must be less than the current time. LtNow
  // can only be used with the Within rule.
  optional BoolField lt_now  = 7;

  // GtNow specifies that this must be greater than the current time. GtNow
  // can only be used with the Within rule.
  optional BoolField gt_now  = 8;

  // Within specifies that this field must be within this duration of the
  // current time. This constraint can be used alone or with the LtNow and
  // GtNow rules.
  optional DurationField within = 9;
}
